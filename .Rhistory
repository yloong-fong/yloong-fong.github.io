setwd("~/Documents/GitHub/yloong-fong.github.io")
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(ggthemes)
require(magrittr)
require(dplyr)
require(tidyr)
require(RColorBrewer)
require(extrafont)
require(ggrepel)
require(ggpubr)
require(rvest)
require(stringr)
require(grid)
require(gridExtra)
require(plotly)
require(DT)
require(shiny)
loadfonts()
setwd("~/Documents/GitHub/yloong-fong.github.io")
winter <- read.csv('winter.csv')
countrystats <- read.csv('dictionary.csv')
#Dealing with Defunct Countries
winter$CountryRename <- ifelse(winter$Country=='URS', 'RUS', as.character(winter$Country))
winter$CountryRename <- ifelse(winter$Country=='EUN', 'RUS', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='GDR', 'GER', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='FRG', 'GER', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='EUA', 'GER', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='TCH', 'CZE', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='YUG', 'SCG', winter$CountryRename)
winter$CountryRename <- ifelse(winter$Country=='ROU', 'ROM', winter$CountryRename)
#Determining Host Country (For later question)
wiki_hosts <- read_html("https://en.wikipedia.org/wiki/Winter_Olympic_Games")
hosts <- html_table(html_nodes(wiki_hosts, "table")[[5]], fill=TRUE)
hosts <- hosts[-1,1:3]
hosts$City <- str_split_fixed(hosts$Host, n=2, ",")[,1]
hosts$Hostcountry <- str_split_fixed(hosts$Host, n=2, ", ")[,2]
hosts <- hosts[-c(5,6,25,26),]
hosts <- hosts[c("Year", "City", "Hostcountry")]
city.compare <- cbind(hosts$City, unique(paste(winter$Year, winter$City, sep=" ")))
winter$City <- ifelse(winter$City=='St.Moritz', 'St. Moritz', as.character(winter$City))
winter$City <- ifelse(winter$City=='Garmisch Partenkirchen', 'Garmisch-Partenkirchen', as.character(winter$City))
winter <- merge(winter, hosts, by=c("Year", "City"))
#Calculating Unique Medals and Creating Long Data by Medal Type (To ensure team sports only count once)
winter$uniquemedals <- paste(winter$Year, winter$Discipline, winter$Event, winter$Medal, winter$Gender, sep=" ")
country.allmedals.alltime <- winter %>% group_by(CountryRename, Medal) %>% summarize(total = length(unique(uniquemedals))) %>% ungroup()
colnames(country.allmedals.alltime)[colnames(country.allmedals.alltime)=="CountryRename"] <- "Code"
country.allmedals.alltime.withstats <- merge(country.allmedals.alltime, countrystats)
#Reshaping Long Data by Medal Type into Wide Data
country.allmedals.alltime.wide <- spread(country.allmedals.alltime, Medal, total)
country.allmedals.alltime.wide$Gold <- ifelse(is.na(country.allmedals.alltime.wide$Gold), 0, country.allmedals.alltime.wide$Gold)
country.allmedals.alltime.wide$Silver <- ifelse(is.na(country.allmedals.alltime.wide$Silver), 0, country.allmedals.alltime.wide$Silver)
country.allmedals.alltime.wide$Bronze <- ifelse(is.na(country.allmedals.alltime.wide$Bronze), 0, country.allmedals.alltime.wide$Bronze)
country.allmedals.alltime.wide$allmedals <- country.allmedals.alltime.wide$Gold + country.allmedals.alltime.wide$Silver + country.allmedals.alltime.wide$Bronze
colnames(country.allmedals.alltime.wide)[colnames(country.allmedals.alltime.wide)=="CountryRename"] <- "Code"
country.allmedals.alltime.wide.withstats <- merge(country.allmedals.alltime.wide, countrystats)
#Calculating Number of Games Each Country Medaled In
country.allmedals.alltime.yearswon <- winter %>% group_by(CountryRename) %>% summarize(yearswon = length(unique(Year))) %>% ungroup()
colnames(country.allmedals.alltime.yearswon)[colnames(country.allmedals.alltime.yearswon)=="CountryRename"] <- "Code"
country.allmedals.alltime.wide.withstats <- merge(country.allmedals.alltime.wide.withstats, country.allmedals.alltime.yearswon)
#Creating Plot of Number of Years Country Medaled by Country's Population
coul <- brewer.pal(11, "Spectral")
coul = colorRampPalette(coul)(40)
plot.country.allmedals.alltime.bypopulation <- ggplot(country.allmedals.alltime.wide.withstats, aes(x = log(Population), y = yearswon, label = Country)) + geom_point(aes(color=Country, size=allmedals), alpha = 0.5) + scale_size(range = c(1, 10)) + geom_text_repel(aes(label=Country), size=2.5, family="Garamond") + guides(color=FALSE) + scale_color_manual(values = coul) + xlab('Population (Log)') + ylab('Years With At Least One Medal Won') + guides(size=guide_legend(title="Total Medals")) + ggtitle("Country's Winter Olympic Success By Population") + theme_tufte() +theme(legend.position = "right", legend.title.align=0.5, plot.title = element_text(hjust = 0.5, face='bold', size=14), text=element_text(family="Garamond"))
plot.country.allmedals.alltime.bypopulation
library(ggmap)
library(leaflet)
library(tidyr)
library(stringr)
library(lubridate)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(ggthemes)
library(sp)
library(rgdal)
library(rgeos)
library(extrafont)
loadfonts()
setwd("~/Documents/GitHub/yloong-fong.github.io")
fire <- read.csv('severe_incidents.csv')
stations <- read.csv('FDNY_Firehouse_Listing.csv')
library(ggmap)
library(leaflet)
library(tidyr)
library(stringr)
library(lubridate)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(ggthemes)
library(sp)
library(rgdal)
library(rgeos)
library(extrafont)
loadfonts()
setwd("~/Documents/GitHub/yloong-fong.github.io")
fire <- read.csv('severe_incidents.csv')
stations <- read.csv('FDNY_Firehouse_Listing.csv')
#Remove rows 849 (lat=42.98, lon=-78.65), 972 (lat= 40.45, lon=-74.81) and 229 (lat=40.70, lon=-73.34)
fire <- fire[-c(849, 972, 2295), ]
#Remove rows with no geographical coordinates
fire <- fire[!is.na(fire$Latitude),]
stations <- stations[!is.na(stations$Latitude),]
#Remove rows that are not in NYC
fire <- fire[!is.na(fire$BOROUGH_DESC),]
#Recoding various attributes of fire incidents to appear neater
fire$duration_formatted <- seconds_to_period(fire$TOTAL_INCIDENT_DURATION)
fire$fire_type <- str_split_fixed(fire$INCIDENT_TYPE_DESC, n=2, " - ")[,2]
fire$fire_date <- str_split_fixed(fire$INCIDENT_DATE_TIME, n=2, " ")[,1]
#Create base map
basemap <- leaflet(fire, width ="100%")%>%
addProviderTiles("Stamen.Terrain", options = providerTileOptions(minZoom=10, maxZoom=18)) %>%
setView(-73.9949344, 40.7179112, zoom = 10)
#Create map
map_1 <- basemap %>%
addCircles(lng = ~Longitude, lat = ~Latitude, color="firebrick",  popup = paste("Location:",fire$STREET_HIGHWAY,"<br/>","Date:", fire$fire_date,"<br/>", "Fire Type:", fire$fire_type ,"<br/>", "Duration of Fire:", fire$duration_formatted,  "<br/>", "Units on Scene:",  fire$UNITS_ONSCENE))
map_1
